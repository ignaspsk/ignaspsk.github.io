[{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/android/","section":"Tags","summary":"","title":"Android","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/fedora/","section":"Tags","summary":"","title":"Fedora","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/grapheneos/","section":"Tags","summary":"","title":"Grapheneos","type":"tags"},{"content":" Introduction # Right of the bat, there is no official install method for Fedora Workstation as there is for Ubuntu or Debian. But it\u0026rsquo;s possible, and it is not difficult to do. In this guide I will show you how to install GrapheneOS in Fedora Linux environment. Official guide can be found here .\nPrerequesites # Carrier lock free Google Pixel device. Up-to-date Fedora Workstation installation Enabling OEM unlocking # Before continuing, you need to connect your device to internet at least once. This is needed for stock OS to check whether the device was sold as locked by a carrier. In settings, go over to About phone and press Build Number repeatedly, until you see message \u0026ldquo;You\u0026rsquo;re now a developer\u0026rdquo; pop up. Then in settings, go to System \u0026gt; Developer Options, and below find the OEM unlocking option and toggle it.\nInstalling fastboot # In the official Fedora 42 repository, required version of android-tools is now available! All you need to do is just get it is just:\nsudo dnf install android-tools Then check the version. Must be at least 35.0.1\nBooting into the bootloader interface # Next, reboot the device and begin holding both power and volume down buttons at the same time. Wait until you enter the bootloader interface. After that, run this to see if Fedora detects your Pixel device:\nsudo fastboot devices Unlocking the bootloader # Unlock it to enable installing custom OS and firmware. Beware that by doing so all data on the device will be wiped.\nsudo fastboot flashing unlock Getting openssh # OpenSSH is used to verify the download of OS beyond the security offered by HTTPS.\nsudo dnf install openssh-clients Downloading OS images # Follow the instructions:\ncurl -O https://releases.grapheneos.org/allowed_signers To download the factory image for your specific pixel, visit releases page and find your device model codename. For example, to download the VERSION release for a device with the codename DEVICE_NAME:\ncurl -O https://releases.grapheneos.org/DEVICE_NAME-install-VERSION.zip curl -O https://releases.grapheneos.org/DEVICE_NAME-install-VERSION.zip.sig Just replace it with what you need. Next, verify downloaded images:\nssh-keygen -Y verify -f allowed_signers -I contact@grapheneos.org -n \u0026#34;factory images\u0026#34; -s DEVICE_NAME-install-VERSION.zip.sig \u0026lt; DEVICE_NAME-install-VERSION.zip Don\u0026rsquo;t forget to replace DEVICE_NAME and VERSION with yours.\nFlashing OS image # To extract factory images:\nbsdtar xvf DEVICE_NAME-install-VERSION.zip And run the installation script that you have extracted together with factory image.\ncd DEVICE_NAME-install-VERSION chmod +x flash-all.sh sudo ./flash-all.sh Locking the bootloader # After the flashing\u0026rsquo;s complete, lock the bootloader by running:\nfastboot flashing lock Now you have successfully installed GrapheneOS in Fedora üëç\nCover background by vishnumaiea on Unsplash ","date":"22 May 2025","externalUrl":null,"permalink":"/posts/graphene-install-fedora-linux/","section":"Posts","summary":"","title":"How to install GrapheneOS in Fedora Linux","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/","section":"Ignas Pa≈°keviƒçius","summary":"","title":"Ignas Pa≈°keviƒçius","type":"page"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"Ai","type":"tags"},{"content":" Introduction # Open WebUI is a popular selfhosted AI chat interface, but it\u0026rsquo;s just a frontend, you need some kind of backend that would run the AI models. You could selfhost them with Ollama, but not everyone has powerful hardware, let alone pay for expensive VPS. This is where NanoGPT comes in. It\u0026rsquo;s a pay-per-prompt AI access provider, which also provides a centralized API access for any model you could think of. Thereby eliminating the need to pay multiple companies for their API. And they accept crypto payments!\nI\u0026rsquo;ve been using the NanoGPT website to chat for a while, but there was a problem. Since NanoGPT saves chats locally in the browser, I can\u0026rsquo;t access them on my phone. Lucky for me, NanoGPT released a OpenAI-compatible chat endpoint, which allows me to integrate this provider into virtually anything that accepts such endpoints. So I combined Open WebUI with NanoGPT for the benefit of cheap prices, good looks, variety of models, and cross-device access. I also used Tailscale and TSDProxy for easy remote access.\nIn this guide I will show you how to set this up. However, I will not cover everything. See prerequisites for what you need to have in place before you begin.\nPrerequisites # Linux server. I\u0026rsquo;m using Ubuntu 24.04.2 LTS Server SSH or direct access to the server Docker installed Downloads page TSDProxy installed Installation HTTPS certificates enabled for your tailnet DNS settings I will assume that you already have a Tailscale account. You can register here . Let\u0026rsquo;s get started.\nInstalling Open WebUI # The documentation is here , now follow these steps. Once again, you will need TSDProxy set up and running for this to work.\nRun this command to pull and run the container. Make sure containers host port is not already occupied, in case it is, change 3000 to some other port, e.g. 3001. sudo docker run -d -p 3000:8080 -v open-webui:/app/backend/data --label \u0026#34;tsdproxy.enable=true\u0026#34; --name open-webui ghcr.io/open-webui/open-webui:main Got to you Tailscale dashboard to click \u0026ldquo;Approve device\u0026rdquo; to approve Open WebUI container into your tailnet. Go to FQDN of your Open WebUI. E.g. https://open-webui.funny-name.ts.net/ Register an account. First one to do so will becomes an administrator. First come first served üòÅ Connecting Open WebUI to NanoGPT # NanoGPT is a paid service, but they accept deposits as little as 0.10$, whether it\u0026rsquo;s crypto or with credit card, so it\u0026rsquo;s fine in my book.\nGo to the API page and create an API key. In you Open WebUI instance, Go to Admin Panel, click \u0026ldquo;Settings\u0026rdquo; tab, then click \u0026ldquo;Connections\u0026rdquo; menu and enable OpenAI API Connections. Click the + sign to create a connection. Then you are presented this window: 3. In the URL field, input https://nano-gpt.com/api/v1 4. In the Key field, paste your API key. 5. Then to add a model, see API page again and choose what model you want to use. Let\u0026rsquo;s say you want to use Deepseek R1, so you go and find the appropriate model ID for it. That would be deepseek-r1-nano. After that don\u0026rsquo;t forget click the + sign as well as the Save button.\nDone! Now you can use your chosen AI model for chatting, and they will be accessible across your tailnet devices.\nCustomization # Icons and descriptions are still missing. Let\u0026rsquo;s fix that.\nFrom where we left off, navigate to \u0026ldquo;Models\u0026rdquo; vertical tab, then click the edit button for your AI model. Open new browser tab and go to this website and look for the icon of your AI model. Download it. Then upload the icon. The rest is self-explanatory. By the way, if your Open WebUI container goes down, since it was created with a docker run command, you will need to run this to start it again.\nsudo docker start open-webui Cover background by hassaanhre on Unsplash ","date":"18 April 2025","externalUrl":null,"permalink":"/posts/open-webui-with-nanogpt/","section":"Posts","summary":"","title":"How to set up OpenWebUI with NanoGPT","type":"posts"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/llm/","section":"Tags","summary":"","title":"Llm","type":"tags"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/nanogpt/","section":"Tags","summary":"","title":"Nanogpt","type":"tags"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/openwebui/","section":"Tags","summary":"","title":"Openwebui","type":"tags"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/tailscale/","section":"Tags","summary":"","title":"Tailscale","type":"tags"},{"content":"","date":"18 April 2025","externalUrl":null,"permalink":"/tags/tsdproxy/","section":"Tags","summary":"","title":"Tsdproxy","type":"tags"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/coral/","section":"Tags","summary":"","title":"Coral","type":"tags"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/frigate/","section":"Tags","summary":"","title":"Frigate","type":"tags"},{"content":" Introduction # If you followed the official coral documentation , you will get error when installing the gasket-dkms package. That\u0026rsquo;s because it\u0026rsquo;s actually outdated, as well as the instructions of adding their repo to apt. Hence I wrote a this guide, I hope you will find it helpful!\nPrerequisites # Installed Ubuntu 24.04.2 server . Debian server should be fine, but the 4th step of Installation section may need to be adjusted to your OS. Installed PCIe Coral Edge TPU in a PCIe slot (A+E in my case) If you have secure boot on, during installation you will get a dialog that will guide you on how to enroll new MOK keys to enable third-party drivers. You will need to reboot. This is done on an amd64 computer, but not tested on a Raspberry Pi, YMMV. Installation # Compiling gasket from source # The version linked in the official coral documentation doesn\u0026rsquo;t work on recent kernel versions. The updated version is available at gasket-driver repo , but has no pre-built packages there. This is where gasket-builder comes in:\nThis repository contains a Docker file to build the deb package to install on recent kernel versions, to avoid installing development dependencies on production servers.\nMake sure you have docker installed as per Docker documentation Clone git repo git clone https://github.com/jnicolson/gasket-builder Move to gasket builder directory and start building. Use sudo if your user isn\u0026rsquo;t in the docker group. cd gasket-builder docker build --output . . If building succeeds, you should see gasket-dkms\u0026lt;version\u0026gt;.deb, where \u0026lt;version\u0026gt; is version of the driver. ls Installing .deb file from terminal # This is self-explanatory.\nsudo apt install ./gasket-dkms\u0026lt;version\u0026gt;.deb If you get \u0026ldquo;unsandboxed\u0026rdquo; error, you should still be fine to proceed. This is just a minor apt sandbox artifact (common when installing from home directories) but has no impact on functionality.\nAdding Googles repository # Commands provided in the official docs give errors because it is outdated. Use these instead.\nAdd repository with signed-by clause echo \u0026#34;deb [signed-by=/etc/apt/keyrings/coral.gpg] https://packages.cloud.google.com/apt coral-edgetpu-stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list Create keyrings directory if needed sudo mkdir -p /etc/apt/keyrings Download key curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/coral.gpg Override Ubuntu\u0026rsquo;s package priority. This may be needed because Ubuntu\u0026rsquo;s repositories have older versions of the same packages. This creates a preferences file to prioritize Google\u0026rsquo;s repo. echo \u0026#34;Package: * Pin: origin packages.cloud.google.com Pin-Priority: 1001\u0026#34; | sudo tee /etc/apt/preferences.d/coral-priority Update apt sudo apt update Installing the libedgetpu1-std # Installing from Google\u0026rsquo;s repository should work just fine. Just to make sure it comes from the right repository, we will use -t coral-edgetpu-stable flag.\nsudo apt install -t coral-edgetpu-stable libedgetpu1-std Verify functionality # If you don\u0026rsquo;t want to reboot your system, load modules manually with modprobe.\nsudo modprobe gasket sudo modprobe apex Check if loaded.\nlsmod | grep -E \u0026#39;gasket|apex\u0026#39; And final check.\nls /dev/apex_0 If you see /dev/apex_0 in the output, then you have successfully installed the driver and Edge TPU runtime.\nCover photo made by me.\n","date":"1 March 2025","externalUrl":null,"permalink":"/posts/pcie-coral-tpu-ubuntu-server/","section":"Posts","summary":"","title":"How to install PCIe Coral TPU drivers in Ubuntu 24.04.2 LTS Server","type":"posts"},{"content":" Introduction # In case you wanted to have remote access to your docker services, there are tailscale sidecars for that, however it has a drawback - you need a new sidecar for each new service. If only there was a Tailscale Docker Proxy that would manage multiple docker services without the need of dedicated sidecars\u0026hellip;\nWell, there is. And it\u0026rsquo;s called TSDProxy . Tailscale even uploaded a video dedicated to this software. Another perk is that you can have tailscale installed on your host machine (e.g. for SSH) while having TSDProxy running without additional configuration, contrary to tailscale sidecars, which didn\u0026rsquo;t work for me.\nOne of the services you might want to have in you tailnet is Frigate , but setting it up was a bit tricky for me. I wish I could have found a complete guide on how to do it, as it would have saved me a lot of time. So I made this guide, and hopefully someone will find it useful.\nIn this guide I will cover how to:\nHow to install TSDProxy How to install Frigate and connect it to TSDProxy (You will need to refer to Frigate documentation to write your config.yaml file, I will not cover it) Prerequisites # Ubuntu or Debian server (I tested on Ubuntu 24.04.2 LTS Server ), or Rasbian on RPi5 (tested) Docker installed (Downloads page ) SSH or otherwise direct access to machine you\u0026rsquo;re planning to run Frigate on. Recommended to enable HTTPS Certificates in DNS settings of tailnet. Installation # Installing TSDProxy # Referring to the documentation , follow these steps.\nCreate docker-compose.yaml for TSDProxy and insert yaml. echo \u0026#34;services: tsdproxy: image: almeidapaulopt/tsdproxy:latest volumes: - /var/run/docker.sock:/var/run/docker.sock - datadir:/data - \u0026lt;PATH_TO_YOUR_CONFIG_DIR\u0026gt;:/config restart: unless-stopped ports: - \u0026#34;8080:8080\u0026#34; volumes: datadir:\u0026#34; \u0026gt;\u0026gt; docker-compose.yaml Change \u0026lt;PATH_TO_YOUR_CONFIG_DIR\u0026gt; to directory that you want, e.g. /home/username/tsdproxy using your favorite text editor. nano docker-compose.yaml After that, start TSDProxy docker container with -d flag to run it in the background. sudo docker compose up -d A configuration file¬†~/directory-of-your-choice/tsdproxy.yaml¬†is created and populated. defaultProxyProvider: default docker: local: # name of the docker target provider host: unix:///var/run/docker.sock # host of the docker socket or daemon targetHostname: 172.31.0.1 # hostname or IP of docker server defaultProxyProvider: default # name of which proxy provider to use files: {} tailscale: providers: default: # name of the provider authKey: \u0026#34;\u0026#34; # optional, define authkey here authKeyFile: \u0026#34;\u0026#34; # optional, use this to load authkey from file. If this is defined, Authkey is ignored controlUrl: https://controlplane.tailscale.com # use this to override the default control URL dataDir: /data/ http: hostname: 0.0.0.0 port: 8080 log: level: info # set logging level info, error or trace json: false # set to true to enable json logging proxyAccessLog: true # set to true to enable container access log Make sure that targetHostname is same as in the output of the following command. sudo docker network inspect bridge | grep Gateway Insert your authkey. Get it here . Make sure you enable \u0026ldquo;reusable\u0026rdquo; when generating the authkey. When you\u0026rsquo;re done editing, restart to apply changes. sudo docker compose restart Optional: run a sample service to make sure everything is working docker run -d --name sample-nginx -p 8111:80 --label \u0026#34;tsdproxy.enable=true\u0026#34; nginx:latest If sample-nginx appears in your dashboard , you\u0026rsquo;re good to go.\nInstalling Frigate # In case of fire, refer to the Frigate documentation .\nCreate another directory. E.g. ~/frigate mkdir ~/frigate \u0026amp;\u0026amp; cd ~/frigate You will need to create two folders and docker-compose.yml in the same directory. mkdir storage config \u0026amp;\u0026amp; touch docker-compose.yml Open docker-compose.yml and paste the following. (CTRL+SHIFT+V to paste in the terminal) services: frigate: container_name: frigate restart: unless-stopped image: ghcr.io/blakeblackshear/frigate:stable volumes: - ./config:/config - ./storage:/media/frigate - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear target: /tmp/cache tmpfs: size: 1000000000 # devices: # - /dev/apex_0:/dev/apex_0 # If you have coral tpu ports: - \u0026#34;8971:5000\u0026#34; - \u0026#34;8554:8554\u0026#34; # RTSP feeds labels: # Important otherwise will not connect to tsdproxy tsdproxy.enable: \u0026#34;true\u0026#34; tsdproxy.scheme: \u0026#34;http\u0026#34; tsdproxy.tlsvalidate: \u0026#34;false\u0026#34; Start the container. sudo docker compose up -d View logs to find admin password for Frigate. Admin username is always admin sudo docker logs frigate Now you should see \u0026ldquo;frigate\u0026rdquo; machine in your dashboard . Approve it, access it in your tailnet\u0026rsquo;s FQDN. It can take a while before TSDProxy connects, generates certificates, starts the proxy.\nOnce you\u0026rsquo;re in, click the settings button and head over to Configuration Editor to finish configuring your Frigate instance. Here\u0026rsquo;s where you should continue .\nCover background by rrricharddd on Unsplash ","date":"1 March 2025","externalUrl":null,"permalink":"/posts/frigate-access-with-tsdproxy/","section":"Posts","summary":"","title":"How to set up Frigate remote access via Tailscale using TSDProxy","type":"posts"},{"content":"","date":"1 March 2025","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]